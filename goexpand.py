#!/usr/bin/python
##########################################################
# Description: Expands supplied IP ranges or subnets.    #
# Author: Jonathan Broche, jhonny@gojhonny.com           #
# Date: 12-29-2014                                       #
# Note: This script requires the netaddr library.        #
# Install it with pip => "python -m pip install netaddr" #
##########################################################
# Usage: goexpand.py -r 192.168.1.1 192.168.1.254        #
# Usage: goexpand.py -f ip_list.txt -o ip_results.txt    #
##########################################################

from netaddr import IPNetwork, iter_iprange
from datetime import datetime
import argparse, os

parser = argparse.ArgumentParser()
parser.add_argument('-r', '--range', help='arbitrary range to expand (e.g. 192.168.1.1 192.168.1.10)', nargs='+')
parser.add_argument('-f', '--file', help='File containing subnets to expand. There should be one subnet (e.g. 192.168.1.1/24) or IP range (e.g. 192.168.1.1-192.168.1.254) per line.')
parser.add_argument('-o', '--outfile', help='File to write results to.')
parser.add_argument('-v', '--verbosity', help='Print or hide results to screen.', default="on")

args = parser.parse_args()

print '\n', '-' * 78, '\n'
print 'Go Go Expand! v0.1 - Expand IP Addresses from specified ranges/subnets'
print '-' * 78, '\n'

start = datetime.now()
results = []

try: 
	if args.range or args.file:
		if args.range:
			for ip in iter_iprange(*(args.range)):
					results.append(ip)

		if args.file:
			if os.path.exists(args.file):
				with open(args.file) as f:
					lines = f.readlines()

				for line in lines:
					if "-" in line:
						for ip in iter_iprange(*(line.split("-"))):
							results.append(ip)
					else:
						for ip in IPNetwork(line):
							results.append(ip)

	if args.outfile:
		with open(args.outfile, 'w') as f:
			for ip in results:
				f.write("{}\n".format(str(ip)))

	if args.verbosity == "on":
		for ip in results:
			print ip

	print "\n\n[*] Completed in {} secs".format((datetime.now()-start).total_seconds())
except Exception as e:
	print "[!] Error: {}".format(e)