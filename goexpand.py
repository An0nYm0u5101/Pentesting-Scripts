#!/usr/bin/python

# GoExpand! - A python based network expander
# This script generates a list of IP addresses based off a 
# set of the provided set of arbitrary IP address ranges.
# This script requires the netaddr library, use: "python -m pip install netaddr"
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Author:  Jonathan Broche
# Contact: jb@gojhonny.com
# Version: 1.0
# Date:    2015-07-15
#
# usuage: ./goexpand [-r range to list (i.e., two IP addresses to expand)] [-f input file with one IP address/range/CIDR per line to list] [-o outputfile]
# example: ./goexpand -r 192.168.1.1 192.168.3.254 -o range_output.txt

import argparse, os, time, datetime, socket, sys
from netaddr import IPNetwork, iter_iprange
from itertools import count

class colors:
    lightblue = "\033[1;36m"
    lightgrey = "\033[0;37m"
    blue = "\033[1;34m"
    normal = "\033[0;00m"
    red = "\033[1;31m"
    yellow = "\033[1;33m"
    white = "\033[1;37m"
    green = "\033[1;32m"

#----------------------------------------#
#         VALIDATE IP                    #
#----------------------------------------#

def validate(ip):
    try:
        print "{}[*]{} Validating {}".format(colors.blue, colors.normal, ip)
        if socket.inet_aton(ip):
            return True
    except socket.error as e:
        print "{}[!]{} {} is not a valid IP address.".format(colors.red, colors.normal, ip)
        return False

def expand_range(iprange, outfile):
    print "{}[*]{} Expanding {}-{}".format(colors.blue, colors.normal, iprange[0], iprange[1])
    if iprange[0] < iprange[1]:
        results = iter_iprange(iprange[0], iprange[1])
    else:
        results = iter_iprange(iprange[1], iprange[0])
    return results

def output(results, outfile):

    for attempt in count(1):
        filename = os.path.join(os.getcwd(), outfile) if attempt == 1 else os.path.join(os.getcwd(), '{}{}'.format(outfile, attempt))   
        
        if not os.path.exists(filename):
            with open(filename, 'w') as f:      
                for gen in results:
                    for ip in gen:
                        f.write('{}\n'.format(ip))
            print "\n{}[*]{} Done! File may be found under {} folder{}".format(colors.green, colors.white, filename, colors.normal)

            break

def main():
    stime = time.time()

    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--range', help='A set of two IPs to extract the range of (e.g., 192.168.1.1-192.168.1.10). No CIDR notations.', nargs='*')
    parser.add_argument('-f', '--file', help='File containing subnets to expand. There should be one subnet (e.g., 192.168.1.1/24) or IP range (e.g. 192.168.1.1-192.168.1.254) per line.')
    parser.add_argument('-o', '--outfile', required=True, help='File to write results to.')
    args = parser.parse_args()

    results, iprange = [], []

    print "\n" + "-" * 70 + "\n" + colors.white + " Go Expand! v1.0 by Jonathan Broche (jb@gojhonny.com)\n" + colors.normal + "-" * 70 + "\n"

    try:
        if args.range or args.file:
            if args.range:
                if [i for i in args.range if '-' not in i]:
                    print "{}[!]{} Please ensure are identified with a dash (e.g., 192.168.1.1-192.168.1.10)".format(colors.red, colors.normal)
                else:                    
                    for ip in ''.join(args.range).split(','):
                        results.append(expand_range([x for x in ip.split('-') if validate(x)], args.outfile))
                                        
                    output(results, args.outfile)
            if args.file: #TODO implement file arg
                pass      

            print "{}[*]{} Completed in {:.1f}s\n".format(colors.blue, colors.normal, time.time()- stime)   
        else:
            print "{}[!]{} Please provide a range [-r range] or file [-f file] to parse through\n".format(colors.red, colors.normal)
 

    except IndexError:
        pass
    except Exception as e:
        print e

if __name__ == '__main__':
    main()