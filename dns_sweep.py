#!/usr/bin/python
#TODO: implement forward dns, dns sweep by network class, forward dns w/ text file

import socket, sys, argparse

#prefixes = ['www', 'www2', 'mail', 'pop', 'pop3', 'imap', 'mx', 'mx1', 'mx2', 'dns', 'ns1', 'ns2', 'ns3', 'ns4', 'smtp', 'exchange', 'proxy', 'router', 'firewall', 'fw', 'ldap', 'sslvpn', 'vpn', 'backup', 'archive', 'demo', 'test', 'admin', 'cisco']

parser = argparse.ArgumentParser(description='Resolve computer names for a given domain')
parser.add_argument('domain', help='domain to be swept')
parser.add_argument('-r', '--reverse', help='reverse dns sweep', action='store_true')
args = parser.parse_args()

print '-' * 78, '\n'
print ' DNS Sweep v0.1 - DNS Sweep by Jonathan Broche (http://gojhonny.com) '
print '-' * 78, '\n'

if args.domain: #simple reverse dns
    try:
        host = socket.gethostbyname(args.domain) #reverse dns from provided hostname
        network = '{}.{}.{}'.format(host.split('.')[0], host.split('.')[1], host.split('.')[2])
        print '{} resolves to {}\n'.format(args.domain, host)
    except socket.gaierror as e:
        print 'Error: Provide a valid hostname. {}'.format(e)
        
if args.reverse: #reverse dns on 
    print '[*] Starting reverse dns sweep\n'
    for ip in range(1,254):
        try:
            name, arpa, addr = socket.gethostbyaddr('{}.{}'.format(network,ip))
            print name, addr[0]
        except socket.herror as e:
            print 'Error: {}.{} timed out. {}'.format(network, ip, e)
